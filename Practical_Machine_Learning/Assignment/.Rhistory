summary(cm$Table)
modelRf
cm <- confusionMatrix(predictions, testing$classe)
predictions <- predict(modelRf, newdata = testing)
cm <- confusionMatrix(predictions, testing$classe)
cm
cm
str(cm)
cm$table
print(cm$table)
?table
table(cm$table)
cm$table
DT <- as.data.table(cm$table)
View(DT)
DT <- as.matrix(DT)
DT
design.matrix <- model.matrix(cm$table)
cm$table
class(cm$table)
table
summary(results)
class(summary(results))
class(summary.resamples)
class(results)
results
summarise(results)
summarize(results)
xt <- xtable(summary(results), caption = "Model Summary")
print(xt, type = "html", floating = FALSE, caption.placement = "top")
# Print Model Summary
xt <- xtable(results), caption = "Model Summary")
print(xt, type = "html", floating = FALSE, caption.placement = "top")
str(results)
# Print Model Summary
xt <- xtable(results$values, caption = "Model Summary")
print(xt, type = "html", floating = FALSE, caption.placement = "top")
cmoverall["P-Value"]
cmoverall <- cm$overall
cmoverall["P-Value"]
cmoverall
str(cm)
cmoverall["95% CI"]
cmoverall <- cm$overall
cmoverall
cm
cmoverall["Accuracy"]
cmoverall["CI"]
cmoverall["95%CI"]
cmoverall["95%_CI"]
cmoverall["P-Value"]
str(cmoverall)
str(cm$overall)
str(cm$statistics)
str(cm$statistic)
cm
cmoverall["95% CI"]
cm$overall["95% CI"]
cm$statistics
cm$statistic
cm$conf
cm$
a
cm
cm$overall["95% CI"]
cmoverall["95%CI"]
list(cmoverall)
list(cm)
list(cm$accuracy)
cmoverall["P-Value [Acc > NIR]"]
cm[[1]]
cm[[2]]
cm[[3]]
cm[[4]]
cm[[5]]
cm[[6]]
cm[[5]]
list(accuracy)
cm[[5]]
cm[[4]]
cm[[3]]
cm[[2]]
cm[[0]]
cm[[1]]
cm[[2]]
cm[[3]]
cm[[3,2]]
cm[[3,1]]
cm[[3], 1]
cm[[3], 2]
cm
cm[[3]]
accuracy <- cmoverall["Accuracy"]
kappa  <- cmoverall["Kappa"]
confInterval <- c(cmoverall["AccuracyLower"], cmoverall["AccuracyUpper"])
pvalue <- cmoverall["AccuracyPValue"]
pvalue
pvalue <- format(cmoverall["AccuracyPValue"], scientific=TRUE)
pvalue
?random.forest
summary(modelRf)
str(modelRf)
modelRf$err.rate
modelRf$finalmodel
modelRf$finalModel
pred.obj <- prediction(predictions, labels,...)
pred.obj <- predict(predictions, labels,...)
str(predictions)
modelRf$finalModel
modelRf$finalModel
modelRf$finalModel[[1]]
modelRf$finalModel[[2]]
modelRf$finalModel[[0]]
modelRf$finalModel[[1]]
modelRf$finalModel[[1]]
modelRf$finalModel[[2]]
modelRf$finalModel[[3]]
modelRf$finalModel[[4]]
modelRf$finalModel[[5]]
modelRf$finalModel[[6]]
modelRf$finalModel[[4]]
dt <- as.datatable(modelRf$finalModel)
dt <- as.data.table(modelRf$finalModel)
modelRf$finalModel
modelRf$finalModel[[1]]
modelRf$finalModel[[5]]
modelRf$finalModel[[3]]
modelRf$finalModel[[2]]
modelRf$finalModel[[4]]
mean(modelRf$finalModel[[4]])
mean(modelRf$finalModel[[5]])
mean(modelRf$finalModel[[6]])
modelRf$finalModel
modelRf$finalModel[OBB]
modelRf$finalModel[OOB]
modelRf$finalModel[OOB]
modelRf$finalModel[A, A]
modelRf$finalModel[[A, A]]
modelRf$finalModel[[OOB]]
fModel <- modelRf$finalModel
fModel
str(fModel)
fModel$err.rate
mean(fModel$err.rate)
fModel$OOB
str(fModel)
str(fModel)
fModel$err.rate[OOB]
fModel$err.rate$OOB
fModel$OOB
fModel$err.rate(OOB)
fModel$err.rate[,OOB]
fModel$err.rate[OOB]
str(fModel)
OOB <- fModel$OOB
OOB
OOB <- fModel$err.rate
test <- OOB$OOB
OOB
sum(OOB)
mean(OOB)
average(OOB)
modelRf
modelRf
modelRf
modelRf[[1]]
modelRf[1]
modelRf[2]
str(modelRf)
modelRf$finalModel
modelRf
str(modelRf)
str(modelRf)
modelRf$results
max(modelRf$results[, Accuracy])
modelRf$results[, Accuracy]
modelRf$results[, results$Accuracy]
modelRf$results[, "Accuracy"]
max(modelRf$results[, "Accuracy"])
max(modelRf$results[, "Kappa"])
modelRf$results
modelRf$finalModel
modelRf$finalModel[, "OOB"])
modelRf$finalModel[, "OOB"]
modelRf$finalModel["OOB"]
modelRf$finalModel[OOB]
modelRf$finalModel
modelRf$finalModel[3]
modelRf$finalModel[2]
modelRf$finalModel[1]
modelRf$finalModel[4]
modelRf$finalModel[4, OOB]
modelRf$finalModel[, OOB]
modelRf$finalModel[4]
modelRf$err.rate
modelRf$finalModel$error.rate
modelRf$finalModel[error.rate]
modelRf$finalModel
modelRf$finalModel[4]
modelRf$finalModel[error.rate]
modelRf$finalModel[4]
OOB <- subset[modelRf$finalModel[4], 1]
OOB <- modelRf$finalModel[4]
OOB
test <- sum(OOB[, 1])
test <- sum(OOB[, OOB])
test
OOB
OOB <- as.data.table(OOB)
sum(OOB[, 1])
round(sum(OOB[, 1]), 4)
round(sum(OOB[, OOB]), 4)
mean(sum(OOB[, OOB]), 4)
list <- list(OOB[, OOB]), 4)
list <- list(OOB[, OOB])
list
max(list)
max(list(OOB[, OOB]))
OOB[, 1])
max(OOB[, 1]))
modelRf$finalModel[4]
modelRf$finalModel
str(modelRf$finalModel)
modelRf$finalModel["OOB"]
modelRf$finalModel[,"OOB"]
modelRf$finalModel[["OOB"]]
str(modelRf$finalModel)
modelRf$error.rate
modelRf$$error.rate
modelRf$error
str(modelRf$finalModel)
modelRf$finalModel[4]
class(modelRf$finalModel[4])
df <- modelRf$finalModel[4]
df
df
class(df)
df <- as.data.frame(df)
class(df)
df
View(df)
sum(df[, err.rate.OOB])
sum(df[, "err.rate.OOB"])
mean(df[, "err.rate.OOB"])
mean(df[, "err.rate.A"])
mean(df[, "err.rate.B"])
mean(df[, "err.rate.C"])
mean(df[, "err.rate.D"])
mean(df[, "err.rate.E"])
FOREST_model <- randomForest(theFormula, data= training, mtry=2, ntree=500, importance=TRUE, do.trace=100)
prob = predict(modelRf, x, type = "prob")
prob = predict(modelRf, classe, type = "prob")
prob = predict(modelRf, "classe", type = "prob")
modelRf$test$votes
modelRf$finalModel$votes
modelRf$finalModel$OOB
modelRf$finalModel$error.rates
modelRf$finalModel$error
modelRf$finalModel$prob
modelRf$finalModel
modelRf$finalModel$oob
modelRf$finalModel$o
modelRf$finalModel$a
modelRf$finalModel$prob
str(modelRf$finalModel)
modelRf$finalModel$err.rate
str(modelRf$finalModel)
modelRf$finalModel$err.rate[1]
modelRf$finalModel$err.rate[2]
modelRf$finalModel$err.rate[, 1]
modelRf$finalModel$err.rate
modelRf$finalModel$err.rate[, 1]
modelRf$finalModel$err.rate[OOB]
modelRf$finalModel$err.rate[1]
modelRf$finalModel$err.rate[2]
modelRf$finalModel$err.rate[3]
modelRf$finalModel$err.rate[4]
modelRf$finalModel$err.rate[5]
modelRf$finalModel$err.rate[500]
modelRf$finalModel$err.rate[1:500]
sum(modelRf$finalModel$err.rate[1:500])
sum(modelRf$finalModel$err.rate[1:500])/500
modelRf$finalModel
modelRf$finalModel$OOB
modelRf$finalModel$oob
str(modelRf$finalModel)
str(modelRf$results)
modelRf$finalModel$err.rate
modelRf$finalModel$err.rate$OOB
modelRf$finalModel$err.rate[OOB]
modelRf$finalModel$err.rate[1:500]
modelRf$table
modelRf$finalModel$table
str(modelRf$finalModel)
modelRf$finalModel
modelRf$finalModel$matrix
modelRf$finalModel$conf.matrix
modelRf$finalModel$conf
xt1 <- xtable(modelRf$finalModel$conf, caption = "Con. Matrix Training Data Set")
xt2 <- xtable(cm$table, caption = "Con. Matrix Testing Data Set")
p1 <- tableGrob(xt1)
p1 <- tableGrob(modelRf$finalModel$conf, caption = "Con. Matrix Training Data Set")
?tableGrob
xt1 <- xtable(modelRf$finalModel$conf, caption = "Training Data Set")
xt2 <- xtable(cm$table, caption = "Testing Data Set")
print(xt1, xt2, type = "html", floating = FALSE, caption.placement = "top")
print(c(xt1, xt2), type = "html", floating = FALSE, caption.placement = "top")
df1 <- modelRf$finalModel$conf
df2 <- cm$table
df3 <- merge(df1, df2)
df3
answerdata
colNames <- colnames(validation_dataset)
# [1]
# Create vector with the NOT required column
colNames <- (colNames[(grepl("problem_id",colNames)) == FALSE])
#[2]
# Create Data Table
data <- as.data.table(validation_dataset)
data <- data[ , colNames, with = FALSE]
# Run Model for predicting Values
answers <- predict(modelRf, data)
answers <- as.data.frame(answers)
colnames(answers) <- c("predicted_classe")
# Problem Id
problemId <- data.frame(problem_id = c(1:20))
# Merge Data Frames with data & results
answerdata <- cbind(problemId, answers, data)
# Set Working Directory
path.expand("~")
setwd("~/Data_Analysis/Coursera/Practical_Machine_Learning/Assignment_files")
answerdata <- as.data.frame(answerdata)
write.table(answerdata, "./reports/answers.csv", row.names = FALSE , sep = ",")
View(answers)
View(answers)
View(answers)
View(answers)
?rep
data <- answers
data(1)
data[1]
data[1, 1]
x <- data[1,1]
data[1, 1]x
x
answers <- rep(x, 1)
answers
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
loopLength <- length(data)
list(data)
nrow(data)
loopLength <- nrow(data)
x <- data[1,1]
x
x <- data[2,1]
x
data <- answers
# Function
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file = filename, quote = FALSE, row.names = FALSE,
col.names = FALSE)
}
}
# Execute Function
loopLength <- nrow(data)
for(i in 1:loopLength){
x <- data[i, 1]
answers <- rep(x, 1)
pml_write_files(answers)
}
loopLength <- nrow(data)
loopLength
data <- answers
data
answers <- predict(modelRf, data)
answers <- as.data.frame(answers)
# Generating Answer Data Set
colNames <- colnames(validation_dataset)
# [1]
# Create vector with the NOT required column
colNames <- (colNames[(grepl("problem_id",colNames)) == FALSE])
#[2]
# Create Data Table
data <- as.data.table(validation_dataset)
data <- data[ , colNames, with = FALSE]
# Run Model for predicting Values
answers <- predict(modelRf, data)
answers <- as.data.frame(answers)
colnames(answers) <- c("predicted_classe")
# Problem Id
problemId <- data.frame(problem_id = c(1:20))
# Merge Data Frames with data & results
answerdata <- cbind(problemId, answers, data)
# Set Working Directory
path.expand("~")
setwd("~/Data_Analysis/Coursera/Practical_Machine_Learning/Assignment_files")
answerdata <- as.data.frame(answerdata)
write.table(answerdata, "./reports/answers.csv", row.names = FALSE , sep = ",")
data <- answers
# Function
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file = filename, quote = FALSE, row.names = FALSE,
col.names = FALSE)
}
}
# Execute Function
loopLength <- nrow(data)
for(i in 1:loopLength){
x <- data[i, 1]
answers <- rep(x, 1)
pml_write_files(answers)
}
loopLength <- nrow(data)
i = 1
x <- data[i, 1]
answers <- rep(x, 1)
pml_write_files(answers)
i = 2
x <- data[i, 1]
answers <- rep(x, 1)
pml_write_files(answers)
i
x <- data[i, 1]
answers <- rep(x, 1)
answers
answers <- rep(x, i)
answers
x
i = 2
x <- data[i, 1]
x
answers <- rep(x, i)
pml_write_files(answers)
# Execute Function
loopLength <- nrow(data)
for(i in 1:loopLength){
x <- data[i, 1]
answers <- rep(x, i)
pml_write_files(answers)
}
i = 2
x <- data[i, 1]
x
answers <- rep(x, i)
pml_write_files(answers)
length(x)
# Function
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file = filename, quote = FALSE, row.names = FALSE,
col.names = FALSE)
}
}
# Execute Function
loopLength <- nrow(data)
for(i in 1:loopLength){
y <- data[i, 1]
answers <- rep(y, i)
pml_write_files(answers)
}
# Execute Function
loopLength <- nrow(data)
for(i in 1:loopLength){
y <- data[i, 1]
answers <- rep(y, i)
pml_write_files(answers)
}
data
loopLength <- nrow(data)
for(i in 1:loopLength){
x <- data[i, 1]
answers <- rep(y, i)
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file = filename, quote = FALSE, row.names = FALSE,
col.names = FALSE)
}
# Execute Function
loopLength <- nrow(data)
for(i in 1:loopLength){
x <- data[i, 1]
answers <- rep(y, i)
filename = paste0("problem_id_",i,".txt")
write.table(x, file = filename, quote = FALSE, row.names = FALSE,
col.names = FALSE)
}
# Execute Function
loopLength <- nrow(data)
for(i in 1:loopLength){
x <- data[i, 1]
answers <- rep(y, i)
filename = paste0("problem_id_",i,".txt")
write.table(x, file = filename, quote = FALSE, row.names = FALSE,
col.names = FALSE)
}
?t.tets
?t.test
q()
